* Leetcode: Find Median from Data Stream                       :BLOG:Amusing:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     oodesign, inspiring, getmedian
:END:
---------------------------------------------------------------------
Find Median from Data Stream
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-median-from-data-stream"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/median-of-two-sorted-arrays][Median of Two Sorted Arrays]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/followup-getmedian][getmedian]], [[https://code.dennyzhang.com/tag/oodesign][oodesign]]
---------------------------------------------------------------------
Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

Examples: 
#+BEGIN_EXAMPLE
[2,3,4] , the median is 3

[2,3], the median is (2 + 3) / 2 = 2.5
#+END_EXAMPLE

Design a data structure that supports the following two operations:

void addNum(int num) - Add a integer number from the data stream to the data structure.
double findMedian() - Return the median of all elements so far.
For example:
#+BEGIN_EXAMPLE
addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3) 
findMedian() -> 2
#+END_EXAMPLE

Follow up:

- If all integer numbers from the stream are between 0 and 100, how would you optimize it?
- If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-median-from-data-stream][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-median-from-data-stream/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/find-median-from-data-stream
## Basic Ideas: Use 2 heaps: 
##      maxheap for the first half, minheap for the second half
##
##  Notice: When taking new values, we can't appeneding them directly.
##          It will not be an ordred integer list then.
##          What if we have duplicate values
##
## Complexity: Time O(log(n)), Space O(n)
import heapq
class MedianFinder:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.left_q, self.right_q = [], []
        heapq.heapify(self.left_q)
        heapq.heapify(self.right_q)

    def addNum(self, num):
        """
        :type num: int
        :rtype: void
        """
        if len(self.left_q) == 0:
            heapq.heappush(self.left_q, -num)
            return
        
        if num <= -self.left_q[0]:
            # should insert to left
            heapq.heappush(self.left_q, -num)
            # rebalancing
            if len(self.left_q) > len(self.right_q)+1:
                element = -heapq.heappop(self.left_q)
                heapq.heappush(self.right_q, element)
        else:
            heapq.heappush(self.right_q, num)
            # rebalancing
            if len(self.right_q) > len(self.left_q):
                new_element = -heapq.heappop(self.right_q)
                heapq.heappush(self.left_q, new_element)

    def findMedian(self):
        """
        :rtype: float
        """
        if len(self.left_q) == 0: return None
        if (len(self.left_q) == len(self.right_q)):
            return (-self.left_q[0] + self.right_q[0])/2
        else:
            return float(-self.left_q[0])

# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
