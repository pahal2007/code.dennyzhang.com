* Leetcode: Merge k Sorted Lists                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     linkedlist, heap, mergelist, classic, mergesort
:END:
---------------------------------------------------------------------
Merge k Sorted Lists
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/coin-path"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-linkedlist][#linkedlist]], [[https://code.dennyzhang.com/review-heap][#heap]], [[https://code.dennyzhang.com/followup-mergelist][#mergelist]], [[https://code.dennyzhang.com/review-mergesort][#mergesort]]
---------------------------------------------------------------------
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/merge-k-sorted-lists][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/merge-k-sorted-lists/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: heap
#+BEGIN_SRC python
## https://code.dennyzhang.com/merge-k-sorted-lists
## Basic Ideas: heap
##
## Complexity: Time O(n*log(k)), Space O(1)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
import heapq
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        l = []
        # minheap
        for i in range(len(lists)):
            node = lists[i]
            if node:
                heapq.heappush(l, (node.val, id(node), node))

        dummyHead = ListNode(0)
        p = dummyHead
        # heapq.heapify(l)
        while len(l)>0:
            (_, _, q) = heapq.heappop(l)
            if q.next:
                heapq.heappush(l, (q.next.val, id(q.next), q.next))
            p.next = q
            p = p.next

        # close the linked list
        p.next = None
        return dummyHead.next
#+END_SRC

- Solution: heap
#+BEGIN_SRC go
// https://code.dennyzhang.com/merge-k-sorted-lists
// Basic Ideas: heap
//    Maintain minheap
//    The top of the heap is the current element.
//    Pop the top.
//     If the element still has next node, push the next
//     Otherwise this list has been fully processed
// Complexity: Time O(n*log(K)), Space O(K)
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
import "container/heap"

type MyHeap []*ListNode

func (h MyHeap) Len() int {
    return len(h)
}

func (h MyHeap) Less(i, j int) bool {
    return h[i].Val<h[j].Val
}

func (h MyHeap) Swap(i, j int) {
    h[i], h[j] = h[j], h[i]
}

func (h *MyHeap)Push(x interface{}) {
    *h = append(*h, x.(*ListNode))
}

func (h *MyHeap)Pop() interface{} {
    res := (*h)[len(*h)-1]
    *h = (*h)[0:len(*h)-1]
    return res
}

func mergeKLists(lists []*ListNode) *ListNode {
    res := &ListNode{} // dummy Node
    p := res

    h := &MyHeap{}
    heap.Init(h)
    for _, n := range lists {
        if n != nil {
            heap.Push(h, n)
        }
    }
    for h.Len()>0 {
        top := heap.Pop(h).(*ListNode)
        p.Next = top
        p = p.Next
        if top.Next != nil {
            heap.Push(h, top.Next)
        }
    }
    return res.Next
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
