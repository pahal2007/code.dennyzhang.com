* Leetcode: Sort Colors                                          :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     twopointer, array, redo
:END:
---------------------------------------------------------------------
Array is composed by only 3 types of elements. Sort it fast.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sort-colors"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-twopointer][#twopointer]], [[https://code.dennyzhang.com/review-array][#array]]
---------------------------------------------------------------------
Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sort-colors][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/sort-colors/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/sort-colors
## Basic Ideas: two pointer
##
##   [2,0,2,1,1,0,1]
##   [1,0,2,1,1,0,2]
## Complexity: Time O(n), Space O(1)
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        if n == 0: return
        left, right = 0, n-1
        cur = 0
        while cur <= right:
            if nums[cur] == 0:
                # swap with left.
                # we know nums[left] won't be 2, so move cur
                nums[left], nums[cur] = nums[cur], nums[left]
                left, cur = left+1, cur+1
            elif nums[cur] == 2:
                # swap with right.
                # we don't know whether nums[right] would be 2 as well
                # So we can't move cur
                nums[right], nums[cur] = nums[cur], nums[right]
                right -= 1
            else:
                # value as 1
                cur += 1
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
