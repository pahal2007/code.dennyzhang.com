* Leetcode: Statistics from a Large Sample                      :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     getmedian
:END:
---------------------------------------------------------------------
Statistics from a Large Sample
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/statistics-from-a-large-sample"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/followup-getmedian][#getmedian]]
---------------------------------------------------------------------
We sampled integers between 0 and 255, and stored the results in an array count:  count[k] is the number of integers we sampled equal to k.

Return the minimum, maximum, mean, median, and mode of the sample respectively, as an array of floating point numbers.  The mode is guaranteed to be unique.

(Recall that the median of a sample is:

The middle element, if the elements of the sample were sorted and the number of elements is odd;
The average of the middle two elements, if the elements of the sample were sorted and the number of elements is even.)

Example 1:
#+BEGIN_EXAMPLE
Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,3.00000,2.37500,2.50000,3.00000]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,4.00000,2.18182,2.00000,1.00000]
#+END_EXAMPLE
 
Constraints:

1. count.length == 256
- 1 <= sum(count) <= 10^9
- The mode of the sample that count represents is unique.
- Answers within 10^-5 of the true value will be accepted as correct.


Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/statistics-from-a-large-sample][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/statistics-from-a-large-sample/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/statistics-from-a-large-sample
// Basic Ideas: two pointer
//
// Complexity: Time O(n), Space O(n)
func sampleStats(count []int) []float64 {
    min, max := 255, 0
    sum, cnt := 0, 0
    mode, maxFreq := 0, 0
    for i, v := range count {
        if v == 0 {
            continue
        }
        if i<min {
            min = i
        }
        if i>max {
            max = i
        }
        if v > maxFreq {
            maxFreq = v
            mode = i
        }
        cnt += v
        sum += v*i // assume won't overflow
    }
    mean := float64(sum)/float64(cnt)
    // two pointer
    i, j := 0, len(count)-1
    v1, v2 := 0, 0
    for i<j {
        if count[i] == 0 {
            i++
            continue
        }
        if count[j] == 0 {
            j--
            continue
        }
        if count[i] == count[j] {
            // move both
            v1, v2 = i, j
            count[i] = 0
            count[j] = 0
            i++
            j--
        } else {
            if count[i] > count[j] {
                // move j
                v2 = j
                count[i] -= count[j]
                count[j] = 0
                j--
            } else {
                // move i
                v1 = i
                count[j] -= count[i]
                count[i] = 0
                i++
            }
        }
    }
    median := float64(i)
    if count[i] == 0 {
        median = float64(v1+v2)/2
    }
    return []float64{float64(min), float64(max), mean, median, float64(mode)}
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
