* Leetcode: Lowest Common Ancestor of a Binary Search Tree                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, lca
:END:
---------------------------------------------------------------------
Lowest Common Ancestor of a Binary Search Tree
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/lowest-common-ancestor-of-a-binary-search-tree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-tree][Lowest Common Ancestor of a Binary Tree]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]], [[https://code.dennyzhang.com/followup-lca][#lca]]
---------------------------------------------------------------------
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: "The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself)."

#+BEGIN_EXAMPLE
        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
#+END_EXAMPLE

For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/lowest-common-ancestor-of-a-binary-search-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-search-tree
// Basic Ideas:
//
// Complexity: Time O(log(n)), Space O(1)
/**
 * Definition for TreeNode.
 * type TreeNode struct {
 *     Val int
 *     Left *ListNode
 *     Right *ListNode
 * }
 */
func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
    if root == nil {
        return root
    }
    if p.Val > q.Val {
        p, q = q, p
    }
    res := root
    for res != nil {
        if res == p || res == q {
            return res
        }
        if res.Val > p.Val && res.Val < q.Val {
            return res
        }
        if res.Val > q.Val {
            res = res.Left
        } else {
            res = res.Right
        }
    }
    return res
}
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-search-tree
// Basic Ideas:
//
// Complexity: Time O(log(n)), Space O(1)
/**
 * Definition for TreeNode.
 * type TreeNode struct {
 *     Val int
 *     Left *ListNode
 *     Right *ListNode
 * }
 */
func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
    res := root
    for res != nil {
        if res.Val > p.Val && res.Val > q.Val {
            res = res.Left
        } else {
            if res.Val < p.Val && res.Val < q.Val {
                res = res.Right
            } else {
                return res
            }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-search-tree
// Basic Ideas: recursive
//
// Complexity: Time O(log(n)), Space O(1)
/**
 * Definition for TreeNode.
 * type TreeNode struct {
 *     Val int
 *     Left *ListNode
 *     Right *ListNode
 * }
 */
func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
    if root == nil || root == p || root == q {
        return root
    }
    if p.Val > q.Val {
        p, q = q, p
    }
    if root.Val > p.Val && root.Val < q.Val {
        return root
    } else {
        if root.Val > q.Val {
            return lowestCommonAncestor(root.Left, p, q)
        } else {
            return lowestCommonAncestor(root.Right, p, q)
        }
    }
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-search-tree
## Basic Ideas: For BST, get min(p.val, q.val) and max(p.val, q.val)
##              Check from the root node
##              If both are smaller than root.val, move the left sub-tree
##              If both are bigger than root.val, move the right-tree
##              If one smaller and one bigger, the current node is what we want
## Assumption: No duplicate value in the BST
## Complexity: Time O(log(n))), Space O(1)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        stack = []
        r = root
        min_val = min(p.val, q.val)
        max_val = max(p.val, q.val)
        while r and (r.val > max_val or r.val < min_val):
            if r.val > max_val:
                r = r.left
            else:
                r = r.right
        return r
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
