* Leetcode: Evaluate Reverse Polish Notation                     :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     math, stack, expression
:END:
---------------------------------------------------------------------
Evaluate Reverse Polish Notation
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/evaluate-reverse-polish-notation"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-math][#math]], [[https://code.dennyzhang.com/review-stack][#stack]], [[https://code.dennyzhang.com/followup-expression][#expression]]
---------------------------------------------------------------------
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
#+BEGIN_EXAMPLE
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/evaluate-reverse-polish-notation][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/evaluate-reverse-polish-notation/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: stack
#+BEGIN_SRC python
## https://code.dennyzhang.com/evaluate-reverse-polish-notation
## Basic Ideas: stack
##
## Complexity: Time O(n), Space O(n)
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        if len(tokens) == 0: return 0
        stack = collections.deque()
        for t in tokens:
            if t not in "+-*/":
                stack.append(int(t))
            else:
                v2 = stack.pop()
                v1 = stack.pop()
                if t == "+":
                    stack.append(v1+v2)
                elif t == "-":
                    stack.append(v1-v2)
                elif t == "*":
                    stack.append(v1*v2) # won't overflow
                else:
                    stack.append(int(v1/v2))
        return stack[0]
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
