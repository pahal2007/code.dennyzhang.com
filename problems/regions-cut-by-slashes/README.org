* Leetcode: Regions Cut By Slashes                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     unionfind, inspiring
:END:
---------------------------------------------------------------------
Regions Cut By Slashes
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/regions-cut-by-slashes"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-unionfind][#unionfind]], [[https://code.dennyzhang.com/review-inspiring][#inspiring]]
---------------------------------------------------------------------
In a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, \, or blank space.  These characters divide the square into contiguous regions.

(Note that backslash characters are escaped, so a \ is represented as "\\".)

Return the number of regions.

Example 1:
[[image-blog:Leetcode: Regions Cut By Slashes][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/regions-cut-by-slashes/my1.png]]
#+BEGIN_EXAMPLE
Input:
[
  " /",
  "/ "
]
Output: 2
Explanation: The 2x2 grid is as follows:
#+END_EXAMPLE

Example 2:
[[image-blog:Leetcode: Regions Cut By Slashes][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/regions-cut-by-slashes/my2.png]]
#+BEGIN_EXAMPLE
Input:
[
  " /",
  "  "
]
Output: 1
Explanation: The 2x2 grid is as follows:
#+END_EXAMPLE

Example 3:
[[image-blog:Leetcode: Regions Cut By Slashes][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/regions-cut-by-slashes/my3.png]]
#+BEGIN_EXAMPLE
Input:
[
  "\\/",
  "/\\"
]
Output: 4
Explanation: (Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.)
The 2x2 grid is as follows:
#+END_EXAMPLE

Example 4:
[[image-blog:Leetcode: Regions Cut By Slashes][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/regions-cut-by-slashes/my4.png]]
#+BEGIN_EXAMPLE
Input:
[
  "/\\",
  "\\/"
]
Output: 5
Explanation: (Recall that because \ characters are escaped, "/\\" refers to /\, and "\\/" refers to \/.)
The 2x2 grid is as follows:
#+END_EXAMPLE

Example 5:
#+BEGIN_EXAMPLE
Input:
[
  "//",
  "/ "
]
Output: 3
Explanation: The 2x2 grid is as follows:
#+END_EXAMPLE

Note:

1. 1 <= grid.length == grid[0].length <= 30
- grid[i][j] is either '/', '\', or ' '.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/regions-cut-by-slashes][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/regions-cut-by-slashes/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution
#+BEGIN_SRC python
## https://code.dennyzhang.com/regions-cut-by-slashes
## Basic Ideas: union find
##
##   Each cell can be divided into 4 parts
##        
##      \ 0 /
##    3      1
##      / 2  \
##     
## Complexity: Time O(n*n), Space O(n*n)
class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        n = len(grid)
        cnt = n*n*4
        parent = [0]*cnt
        for i in range(len(parent)): parent[i] = i
        def find(x):
            # TODO: path compression
            while parent[x] != x:
                x = parent[x]
            return x

        def union(x, y):
            nonlocal parent, cnt
            x2, y2 = find(x), find(y)
            # TODO: union by rank
            if y2 != x2:
                parent[y2] = x2
                cnt -= 1

        for i in range(n):
            for j in range(n):
                k = (i*n+j)*4
                # union inside one cell
                if grid[i][j] == " ":
                    union(k, k+1)
                    union(k+1, k+2)
                    union(k+2, k+3)
                    union(k, k+3)
                elif grid[i][j] == "\\":
                    union(k, k+1)
                    union(k+3, k+2)
                else:
                    union(k, k+3)
                    union(k+1, k+2)
                # union with adjacent cell
                # north/south
                if i>0: union(k, k-4*n+2)
                if i<n-1: union(k+2, k+4*n)
                # west/east
                if j>0: union(k+3, k-4+1)
                if j<n-1: union(k+1, k+4+3)
        return cnt
#+END_SRC

- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/regions-cut-by-slashes
// Basic Ideas: union find
//
//  Divide one cell into 4 parts
//  Union regions, and get the count of regions.
//
// Complexity: Time O(n*n), Space O(n*n)
var cnt int

type DSU struct {
    parent []int
}

func constructor(size int) DSU {
    parent := make([]int, size)
    for i, _ := range parent {
        parent[i] = i
    }
    return DSU{parent:parent}
}

func (dsu *DSU) union(x, y int) {
    x1, y1 := dsu.find(x), dsu.find(y)
    if x1 != y1 {
        dsu.parent[y1] = x1
        cnt--
    }
}

func (dsu *DSU) find(x int) int {
    for dsu.parent[x] != x {
        x = dsu.parent[x]
    }
    return x
}

func regionsBySlashes(grid []string) int {
    cnt = len(grid)*len(grid)*4
    dsu := constructor(cnt)
    for i, row := range grid {
        for j, v := range row {
            index := (i*len(grid)+j)*4
            // union inside the cell
            if v == '/' {
                dsu.union(index, index+3)
                dsu.union(index+1, index+2)
            }
            if v == '\\' {
                dsu.union(index, index+1)
                dsu.union(index+2, index+3)
            }
            if v == ' ' {
                dsu.union(index, index+1)
                dsu.union(index+1, index+2)
                dsu.union(index+2, index+3)
                dsu.union(index+3, index)
            }
            // union across cells
            // north
            if i>0 {
                dsu.union(index-4*len(grid)+2, index)
            }
            // east
            if j<len(grid)-1 {
                dsu.union(index+7, index+1)
            }
            // south
            if i<len(grid)-1 {
                dsu.union(index+4*len(grid), index+2)
            }
            // west
            if j>0 {
                dsu.union(index-3, index+3)
            }
        }
    }
    return cnt
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
