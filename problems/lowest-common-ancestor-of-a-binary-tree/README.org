* Leetcode: Lowest Common Ancestor of a Binary Tree             :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, manydetails, recursive, inspiring, heightoftree, lca
:END:
---------------------------------------------------------------------
Lowest Common Ancestor of a Binary Tree
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/lowest-common-ancestor-of-a-binary-tree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-search-tree][Lowest Common Ancestor of a Binary Search Tree]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/review-manydetails][#manydetails]], [[https://code.dennyzhang.com/review-recursive][#recursive]], [[https://code.dennyzhang.com/review-inspiring][#inspiring]], [[https://code.dennyzhang.com/tag/heightoftree][#heightoftree]], [[https://code.dennyzhang.com/followup-lca][#lca]]
---------------------------------------------------------------------

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: "The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself)."

Given the following binary search tree:  root = [3,5,1,6,2,0,8,null,null,7,4]
#+BEGIN_EXAMPLE
        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
#+END_EXAMPLE

Example 1:
#+BEGIN_EXAMPLE
Input: root, p = 5, q = 1
Output: 3
Explanation: The LCA of of nodes 5 and 1 is 3.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: root, p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself
             according to the LCA definition.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/lowest-common-ancestor-of-a-binary-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution
#+BEGIN_SRC python
## https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-tree
## Basic Ideas: recursive
##
##   If exists in one subtree, return it.
##   Otherwise, return the root
##
##   Base condition: if root equals one, return root
##
## Complexity: Time O(n), Space O(1)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # empty, or hit one
        if (not root) or root == p or root == q: return root
        r = self.lowestCommonAncestor(root.left, p, q)
        s = self.lowestCommonAncestor(root.right, p, q)
        # Find the nodes from both sub-tree
        if r and s:
            return root
        return r if not s else s
#+END_SRC

- Solution recursive
#+BEGIN_SRC go
// https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-tree
// Basic Ideas: dfs
//
//  Instead of searching both p and q, search one
//
// Complexity: Time O(n), Space O(h)
/**
 * Definition for TreeNode.
 * type TreeNode struct {
 *     Val int
 *     Left *ListNode
 *     Right *ListNode
 * }
 */
func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
    if root == nil { return nil }
    // found either one
    if root == p || root == q {
        return root
    }
    left := lowestCommonAncestor(root.Left, p, q)
    right := lowestCommonAncestor(root.Right, p, q)
    if left != nil && right != nil {
        return root
    }
    if left != nil {
        return left
    } else {
        return right
    }
}
#+END_SRC

- Solution: Caculate the visit path

#+BEGIN_SRC go
// https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-tree
// Basic Ideas: dfs
//
// Complexity: Time O(n), Space O(h)
/**
 * Definition for TreeNode.
 * type TreeNode struct {
 *     Val int
 *     Left *ListNode
 *     Right *ListNode
 * }
 */
func dfs(root *TreeNode, target *TreeNode, path *[]*TreeNode) bool {
    if root == nil {
        return false
    }
    // update path
    *path = append(*path, root)
    if root == target {
        return true
    }
    if dfs(root.Left, target, path) {
        return true
    }
    if dfs(root.Right, target, path) {
        return true
    }
    *path = (*path)[0:len(*path)-1]
    return false
}

func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
    l1 := []*TreeNode{}
    dfs(root, p, &l1)

    l2 := []*TreeNode{}
    dfs(root, q, &l2)

    i := 0
    for ; i<len(l1) && i<len(l2); i++ {
        if l1[i] != l2[i] {
            break
        }
    }
    return l1[i-1]
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-tree
## Basic Ideas: recursive
##
## Notice:
##   Here we assume p, q will exists in the tree
##
## Complexity: ?
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        if root is None or root == p or root == q: return root
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if left and right: return root
        return left if left else right        
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
