* Leetcode: Count Complete Tree Nodes                             :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, inspiring, classic, recursive, redo
:END:
---------------------------------------------------------------------
Count Complete Tree Nodes
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/count-complete-tree-nodes"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-recursive][#recursive]]
---------------------------------------------------------------------
Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from [[https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees][Wikipedia]]:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/count-complete-tree-nodes][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/count-complete-tree-nodes/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/count-complete-tree-nodes
## Basic Ideas: Cut the examine dataset into half
##              Check height of sub-tree and right-tree
##              For each divide-conquer, one half will be solved without recursive
##
##    Sample Data: 
##             1        
##           /   \
##          2     3
##         /
##        4
##
## Complexity: Time O(h*log(n)) = O(log(n)*log(n)). Space O(1). If include system stack, Space O(log(n))
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root is None: return 0
        # root node is with height 0
        lh, rh = 0, 0
        lnode, rnode = root, root
        while lnode:
            lnode = lnode.left
            lh += 1
        while rnode:
            rnode = rnode.right
            rh += 1

        if lh == rh:
            return pow(2, lh) - 1
        else:
            return self.countNodes(root.left) + self.countNodes(root.right) + 1
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
