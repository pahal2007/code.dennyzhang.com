* Review: Heap Problems                                         :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: heap, review
:END:
---------------------------------------------------------------------
heap is a specialized tree-based data structure. Heap is useful to implement a priority queue.

Key operations: find-min, get-min, insert, etc.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-heap"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

*Basic Abstractions*
| Name                                           | Summary        |
|------------------------------------------------+----------------|
| Build a heap                                   | Time O(n)      |
| Insert an element to binary heap               | Time O(log(n)) |
| Remove the top from binary heap                | Time O(log(n)) |
| *Remove an item by value*                      | Time O(n)      |
| For topk max, need minheap, instead of maxheap |                |
*Scenarios*
*Code Skeleton*

*Top Questions*
| Num | Problem             | Summary                       |
|-----+---------------------+-------------------------------|
|   1 | Meeting Rooms II    | [[https://code.dennyzhang.com/meeting-rooms-ii][LeetCode: Meeting Rooms II]]    |
|   2 | Task Scheduler      | [[https://code.dennyzhang.com/task-scheduler][LeetCode: Task Scheduler]]      |
|   3 | Last Stone Weight   | [[https://code.dennyzhang.com/last-stone-weight][LeetCode: Last Stone Weight]]   |
|   4 | The Skyline Problem | [[https://code.dennyzhang.com/the-skyline-problem][LeetCode: The Skyline Problem]] |
|   5 | Task Scheduler      | [[https://code.dennyzhang.com/task-scheduler][LeetCode: Task Scheduler]]      |
#+TBLFM: $1=@-1$1+1;N

*Code Skeleton*
#+BEGIN_SRC python
## https://code.dennyzhang.com/merge-k-sorted-lists
## Basic Ideas: heap
##
## Complexity: Time O(n*log(k)), Space O(1)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
import heapq
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        l = []
        # minheap
        for i in range(len(lists)):
            node = lists[i]
            if node:
                heapq.heappush(l, (node.val, id(node), node))

        dummyHead = ListNode(0)
        p = dummyHead
        # heapq.heapify(l)
        while len(l)>0:
            (_, _, q) = heapq.heappop(l)
            if q.next:
                heapq.heappush(l, (q.next.val, id(q.next), q.next))
            p.next = q
            p = p.next

        # close the linked list
        p.next = None
        return dummyHead.next
#+END_SRC

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/minimum-cost-to-connect-sticks
// Basic Ideas: min heap
//   cost = (n-1)*l[0]+(n-1)*l[1]+(n-2)*l[2]+(n-3)*l[3]....+ l[n-1]
// Complexity: O(n*log(n)), Space O(1)
// min heap
import "container/heap"
type IntHeap []int
func (h IntHeap) Len() int {
    return len(h)
}

func (h IntHeap) Less(i, j int) bool {
    return h[i] < h[j]
}

func (h IntHeap) Swap(i, j int) {
    h[i], h[j] = h[j], h[i]
}

func (h *IntHeap) Push(x interface{}) {
    *h = append(*h, x.(int))
}

func (h *IntHeap) Pop() interface{} {
    res := (*h)[len(*h)-1]
    *h = (*h)[0:len(*h)-1]
    return res
}

func connectSticks(sticks []int) int {
    h := &IntHeap{}
    heap.Init(h)
    for _, v := range sticks {
        heap.Push(h, v)
    }
    res := 0
    for h.Len() != 1 {
        n1 := heap.Pop(h).(int)
        n2 := heap.Pop(h).(int)
        res += n1+n2
        heap.Push(h, n1+n2)
    }
    return res
}
#+END_SRC

*Ideas*
| Name                  | Example                    |
|-----------------------+----------------------------|
| Min heap or max heap? | Check the root of the heap |

Binary heaps:
1. It may be represented by using an array, which is space-efficient.
- The children of the node at position n would be at positions 2n + 1 and 2n + 2 in a zero-based array.
- From child to parent: n -> (n-1)/2

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/sliding-window-median
def heapRemove(self, l, item):
    k = -1
    for i in range(len(l)):
        if l[i] == item:
            k = i
            break
    if k != -1:
        l[k] = l[0]
        heapq.heappop(l)
        heapq.heapify(l)
        return True
    return False
#+END_SRC
---------------------------------------------------------------------
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]

See all heap problems: [[https://code.dennyzhang.com/tag/heap/][#heap]]
[display-posts tag="heap" posts_per_page="100" orderby="title"]

Useful Link:
- [[https://www.geeksforgeeks.org/heap-queue-or-heapq-in-python/][Heap queue (or heapq) in Python]]
- [[https://www.pythoncentral.io/use-queue-beginners-guide/][How to use Queue: A beginner's guide]]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:

