* Review: Binary Tree Problems                                  :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: binarytree, review
:END:
---------------------------------------------------------------------
Many binary tree problems are about how to traversal it. In both recursive or non-recursive ways.

Binary Tree Traversal: Preorder, Inorder, Postorder, Level Order, Vertical Order, Right-Middle-Left, etc.

Only get the rightmost node at each level. Only get the leftmost node at each level, etc.

We might also see interesting requirements about updating binarytree. e,g, [[https://code.dennyzhang.com/populating-next-right-pointers-in-each-node-ii/][add a pointer to next]], [[https://code.dennyzhang.com/recover-binary-search-tree/][correct two nodes]], [[https://code.dennyzhang.com/delete-node-in-a-bst/][delete a node]], etc.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-binarytree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

| Num | Problem                                              | Summary                                                               |
|-----+------------------------------------------------------+-----------------------------------------------------------------------|
|   1 | Binary Tree Level Order Traversal                    | [[https://code.dennyzhang.com/binary-tree-right-side-view][LeetCode: Binary Tree Right Side View]]                                 |
|   2 | Tree Traversal: Binary Tree Vertical Order Traversal | [[https://code.dennyzhang.com/binary-tree-vertical-order-traversal][LeetCode: Binary Tree Vertical Order Traversal]]                        |
|   3 | Tree Traversal: Find Leaves of Binary Tree           | [[https://code.dennyzhang.com/find-leaves-of-binary-tree][Leetcode: Find Leaves of Binary Tree]]                                  |
|   4 | Get binary tree height, width                        | [[https://code.dennyzhang.com/balanced-binary-tree][LeetCode: Balanced Binary Tree]]                                        |
|   5 | LCA - Lowest Common Ancestor of a binary Tree        | [[https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-tree][LeetCode: Lowest Common Ancestor of a Binary Tree]]                     |
|   6 | Validate Binary Search Tree                          | [[https://code.dennyzhang.com/validate-binary-search-tree][LeetCode: Validate Binary Search Tree]]                                 |
|   7 | Construct binary tree                                | [[https://code.dennyzhang.com/construct-binary-tree-from-preorder-and-postorder-traversal][LeetCode: Construct Binary Tree from Preorder and Postorder Traversal]] |
|   8 | Distribute Coins in Binary Tree                      | [[https://code.dennyzhang.com/distribute-coins-in-binary-tree][LeetCode: Distribute Coins in Binary Tree]]                             |
|   9 | Binary Tree Vertical Order Traversal                 | [[https://code.dennyzhang.com/binary-tree-vertical-order-traversal][LeetCode: Binary Tree Vertical Order Traversal]]                        |
|  10 | Verify Preorder Sequence in Binary Search Tree       | [[https://code.dennyzhang.com/verify-preorder-sequence-in-binary-search-tree][LeetCode: Verify Preorder Sequence in Binary Search Tree]]              |
|  11 | Recursive + Greedy                                   | [[https://code.dennyzhang.com/binary-tree-coloring-game][LeetCode: Binary Tree Coloring Game]]                                   |
|  12 | Binary tree + greedy                                 | [[https://code.dennyzhang.com/binary-tree-cameras][LeetCode: Binary Tree Cameras]]                                         |
|  13 | Revert binary tree between left and right            |                                                                       |
|  14 | binary tree serialization and deserialization        |                                                                       |
|  15 | Morris tree trasversal                               |                                                                       |
|  16 | Find the next node of binary search tree             |                                                                       |
|  17 | Count Complete Tree Nodes                            | [[https://code.dennyzhang.com/count-complete-tree-nodes/][LeetCode: Count Complete Tree Nodes]]                                   |
|  18 | Binary Tree Upside Down                              | [[https://code.dennyzhang.com/binary-tree-upside-down][Leetcode: Binary Tree Upside Down]]                                     |
#+TBLFM: $1=@-1$1+1;N

#+BEGIN_SRC c++
// In-order traversal
// terminate when node is null
// function calls against both non-null pointers and null pointers
void inorder(node *r) {
  if (r == NULL)
    return;
  inorder(r->left);
  printf("%d", r->data);
  inorder(r->right);
}
#+END_SRC

#+BEGIN_SRC c++
// In-order traversal
// terminate when node is null or a leaf
// function calls against non-null pointers only
void inorder(node *r) {
  if (r == NULL)
    return;
  if (r->left != NULL) {
    inorder(r->left);
  }
  printf("%d", r->data);
  if (r->right != NULL) {
    inorder(r->right);
  }
}
#+END_SRC

Personally I like level-order (or BFS) very much. 

- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]

(See all bfs problems: [[https://code.dennyzhang.com/review-bfs][#bfs]])

Q: How to time complexity for tree problems?

Q: Do you know the difference between level-order vs BFS(Breadth-first search)?

#+BEGIN_EXAMPLE
level-order traversal is the same as breadth-first traversal. 
There are many reasons to traverse something, it doesn't just have 
to be to search, as breadth-first search seems to imply, although 
many (or most) don't make that distinction and use the terms interchangeably.
#+END_EXAMPLE

Examine previous/next node for in-order traversal. [[https://code.dennyzhang.com/closest-binary-search-tree-value][Closest Binary Search Tree Value]].
The most impressive problems to me:
---------------------------------------------------------------------
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]

See all binarytree problems: [[https://code.dennyzhang.com/review-binarytree/][#binarytree]].
[display-posts tag="binarytree" posts_per_page="100" orderby="title"]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:

