* Review: Recursive Problems                                    :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: recursive, review
:END:
---------------------------------------------------------------------
Recursion is a problem solving technique, where solutino of a larger problem is defined in terms of smaller instances of itself.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-recursive"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

*Basic Abstractions*
| Num | Name                             | Summary                                                                 |
|-----+----------------------------------+-------------------------------------------------------------------------|
|   1 | Recursive function               | Visualize a larger problem into a smaller one of *the exact same type*  |
|   2 | Terminating condition            | Function stops calling itself when the terminating condition is reached |
|   3 | Head recursion                   | When recursive call is made before it performs its own task             |
|   4 | Tail recursion                   | When recursive call is made after it performs its own task              |
|   5 | Tail recursion vs iterative loop | tail recursion can be easily re-write in form of a loop                 |
|   6 | Count Complete Tree Nodes        | [[https://code.dennyzhang.com/count-complete-tree-nodes][Leetcode: Count Complete Tree Nodes]]                                     |
#+TBLFM: $1=@-1$1+1;N

#+BEGIN_SRC c++
// traverse a linked list
// head recursion
void traverse(Node* head) {
  if head != NULL {
     traverse(head->next);
     printf("%d", head->data);
  }
}
#+END_SRC

#+BEGIN_SRC c++
// traverse a linked list
// tail recursion
void traverse(Node* head) {
  if head != NULL {
     printf("%d", head->data);
     traverse(head->next);
  }
}
#+END_SRC
Never miss the terminating condition, else the function may fall into infinite recursion.

*Scenarios*
*Code Skeleton*
*Top Questions*
| Name            | Example |
|-----------------+---------|
| Recursive vs DP |         |

[[color:#c7254e][Key Questions:]]
- What are your base cases?
- How you get f(n) from f(n-1)?
- How to evaluate the complexity: time and space?
- For nested problems, we can use recursive to simplify the logic. [[https://code.dennyzhang.com/flatten-nested-list-iterator][Flatten Nested List Iterator]]

The most impressive problems to me:
- [[https://code.dennyzhang.com/count-complete-tree-nodes][Count Complete Tree Nodes]]
- [[https://code.dennyzhang.com/flatten-nested-list-iterator][Flatten Nested List Iterator]]
- [[https://code.dennyzhang.com/super-pow][Super Pow]]
- [[https://code.dennyzhang.com/reaching-points][Reaching Points]]

---------------------------------------------------------------------
See all recursive problems: [[https://code.dennyzhang.com/tag/recursive/][#recursive]]
[display-posts tag="recursive" posts_per_page="100" orderby="title"]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:

